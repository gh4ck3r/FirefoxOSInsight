/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_USSDReceivedEventBinding_h__
#define mozilla_dom_USSDReceivedEventBinding_h__

#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/DOMJSClass.h"
#include "mozilla/dom/DOMJSProxyHandler.h"

class XPCWrappedNativeScope;

namespace mozilla {
namespace dom {

struct USSDReceivedEventDict : public MainThreadDictionaryBase {
  USSDReceivedEventDict() {}
  bool Init(JSContext* cx, JSObject* scopeObj, const JS::Value& val);
  bool ToObject(JSContext* cx, JSObject* parentObject, JS::Value *vp);

  bool Init(const nsAString& aJSON)
  {
    mozilla::Maybe<JSAutoRequest> ar;
    mozilla::Maybe<JSAutoCompartment> ac;
    jsval json = JSVAL_VOID;
    JSContext* cx = ParseJSON(aJSON, ar, ac, json);
    NS_ENSURE_TRUE(cx, false);
    return Init(cx, nullptr, json);
  }

  nsString mMessage;
  bool mSessionEnded;
private:
  // Disallow copy-construction
  USSDReceivedEventDict(const USSDReceivedEventDict&) MOZ_DELETE;
  static bool InitIds(JSContext* cx);
  static bool initedIds;
  static jsid message_id;
  static jsid sessionEnded_id;
};
struct USSDReceivedEventDictInitializer : public USSDReceivedEventDict {
  USSDReceivedEventDictInitializer() {
    // Safe to pass a null context if we pass a null value
    Init(nullptr, nullptr, JS::NullValue());
  }
};

} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_USSDReceivedEventBinding_h__
